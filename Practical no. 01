
Implement depth first search algorithm and Breadth First Search algorithm. Use an undirected graph and develop a recursive algorithm for searching all the vertices of a graph or tree data structure.


Code:


from collections import defaultdict, deque
class Graph:
    def __init__(self):
        # Default dictionary to store graph
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)  # Since it's undirected, add the reverse edge as well.

    def dfs_recursive(self, vertex, visited=None):
        if visited is None:
            visited = set()
        visited.add(vertex)
        print(vertex, end=' ')
        for neighbor in self.graph[vertex]:
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)

    def bfs(self, start):
        visited = set()  # To keep track of visited nodes
        queue = deque([start])  # Use deque for an efficient queue implementation
        visited.add(start)

        while queue:
            vertex = queue.popleft()  # Pop the front of the queue
            print(vertex, end=' ')

            # Add all unvisited neighbors to the queue
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    queue.append(neighbor)
                    visited.add(neighbor)

# Example usage:
g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 3)
g.add_edge(3, 4)

print("Depth First Search (starting from vertex 0):")
g.dfs_recursive(0)

print("\nBreadth First Search (starting from vertex 0):")
g.bfs(0)


Description :
Objective:cTo implement Depth First Search (DFS) using recursion and Breadth First Search (BFS) using a queue on an undirected graph and traverse all its vertices.
Theory:
Graph Traversal refers to the process of visiting all the vertices in a graph.
	•	Depth First Search (DFS):
	•	DFS is a traversal algorithm that starts from a source node and explores as far as possible along each branch before backtracking.
	•	It uses recursion or an explicit stack.
	•	In this implementation, DFS is recursive and uses a set to track visited nodes.
	•	Breadth First Search (BFS):
	•	BFS is a traversal algorithm that starts from a source node and explores all its neighboring nodes at the present depth before moving on to nodes at the next level.
	•	It uses a queue to manage the traversal order.
Both algorithms are demonstrated on an undirected graph using Python.

Algorithm Steps:
DFS Recursive Algorithm:
	1.	Start from the given vertex.
	2.	Mark the current vertex as visited.
	3.	Recursively visit all adjacent unvisited vertices.
BFS Algorithm:
	1.	Start from the given vertex and mark it as visited.
	2.	Add it to a queue.
	3.	While the queue is not empty:
	•	Remove a vertex from the queue and print it.
	•	Add all its unvisited neighbors to the queue and mark them as visit
