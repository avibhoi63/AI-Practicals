
Implement depth first search algorithm and Breadth First Search algorithm. Use an undirected graph and develop a recursive algorithm for searching all the vertices of a graph or tree data structure.


Code:


from collections import defaultdict, deque
class Graph:
    def __init__(self):
        # Default dictionary to store graph
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)  # Since it's undirected, add the reverse edge as well.

    def dfs_recursive(self, vertex, visited=None):
        if visited is None:
            visited = set()
        visited.add(vertex)
        print(vertex, end=' ')
        for neighbor in self.graph[vertex]:
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)

    def bfs(self, start):
        visited = set()  # To keep track of visited nodes
        queue = deque([start])  # Use deque for an efficient queue implementation
        visited.add(start)

        while queue:
            vertex = queue.popleft()  # Pop the front of the queue
            print(vertex, end=' ')

            # Add all unvisited neighbors to the queue
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    queue.append(neighbor)
                    visited.add(neighbor)

# Example usage:
g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 3)
g.add_edge(3, 4)

print("Depth First Search (starting from vertex 0):")
g.dfs_recursive(0)

print("\nBreadth First Search (starting from vertex 0):")
g.bfs(0)


Description :
Objective:cTo implement Depth First Search (DFS) using recursion and Breadth First Search (BFS) using a queue on an undirected graph and traverse all its vertices.
Theory:
Graph Traversal refers to the process of visiting all the vertices in a graph.
	â€¢	Depth First Search (DFS):
	â€¢	DFS is a traversal algorithm that starts from a source node and explores as far as possible along each branch before backtracking.
	â€¢	It uses recursion or an explicit stack.
	â€¢	In this implementation, DFS is recursive and uses a set to track visited nodes.
	â€¢	Breadth First Search (BFS):
	â€¢	BFS is a traversal algorithm that starts from a source node and explores all its neighboring nodes at the present depth before moving on to nodes at the next level.
	â€¢	It uses a queue to manage the traversal order.
Both algorithms are demonstrated on an undirected graph using Python.

Algorithm Steps:
DFS Recursive Algorithm:
	1.	Start from the given vertex.
	2.	Mark the current vertex as visited.
	3.	Recursively visit all adjacent unvisited vertices.
BFS Algorithm:
	1.	Start from the given vertex and mark it as visited.
	2.	Add it to a queue.
	3.	While the queue is not empty:
	â€¢	Remove a vertex from the queue and print it.
	â€¢	Add all its unvisited neighbors to the queue and mark them as visit

Explaination of the code:

from collections import defaultdict, deque    ---	â€¢	defaultdict: Automatically initializes a list for new keys (used for the graph).
	â€¢	deque: Used for efficient queue operations in BFS.

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)   ----	â€¢	Initializes an empty undirected graph using a dictionary where each key (node) maps to a list of neighbors.

def add_edge(self, u, v):
    self.graph[u].append(v)
    self.graph[v].append(u)   -----  Adds an edge between nodes u and v.
	â€¢	Since the graph is undirected, it adds both u â†’ v and v â†’ u.

def dfs_recursive(self, vertex, visited=None):   ----	Starts DFS traversal from a given vertex using recursion.

    if visited is None:
        visited = set()  ----	â€¢	Initializes a visited set to avoid revisiting nodes.

    visited.add(vertex)
    print(vertex, end=' ') ---  	â€¢	Marks the current vertex as visited and prints it.

    for neighbor in self.graph[vertex]:
        if neighbor not in visited:
            self.dfs_recursive(neighbor, visited)   ---Recursively visits each unvisited neighbor.

def bfs(self, start):
    visited = set()
    queue = deque([start])    ----	Initializes a queue with the starting node and a visited set.

    visited.add(start)     ----	Marks the starting node as visited

    while queue:
        vertex = queue.popleft()
        print(vertex, end=' ')    ----- 	Removes the front node from the queue and prints it.

        for neighbor in self.graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)  ---	â€¢	Adds all unvisited neighbors to the queue and marks them visited.

g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 3)
g.add_edge(3, 4)   ----  	Creates a graph with the given edges.

print("Depth First Search (starting from vertex 0):")
g.dfs_recursive(0)   ---- runs DFS starting from node 0.

print("\nBreadth First Search (starting from vertex 0):")
g.bfs(0)   ---- runs BFS starting from node 0.

Question:
Conceptual Questions
1.	What is a greedy algorithm?
â†’ Chooses the best option at each step to get the final result.
2.	Why is Selection Sort a greedy algorithm?
â†’ It picks the smallest element in each step and places it in order.
3.	Greedy vs Dynamic Programming?
â†’ Greedy: Local best choice only.
â†’ DP: Tries all options, stores results.
4.	Time & Space Complexity?
â†’ Time: O(nÂ²)
â†’ Space: O(1)
5.	Best input for Selection Sort?
â†’ Works same for all inputs, no performance boost on sorted data.
6.	Best & Worst case time?
â†’ Both are O(nÂ²)
ðŸ”¹ Code-Based Questions
1.	Outer vs Inner loop?
â†’ Outer: Position to fill.
â†’ Inner: Finds smallest element.
2.	Use of min_index?
â†’ Stores index of smallest number.
3.	What if no swapping?
â†’ List wonâ€™t be sorted.
4.	Sort in descending?
â†’ Find the maximum instead of minimum.
5.	Already sorted input?
â†’ Still takes O(nÂ²) time.
ðŸ”¹ Application Questions
1.	Where to use?
â†’ Small data, simple cases, low memory.
2.	Why avoid it?
â†’ Slow for big data.
3.	Use for large data?
â†’ No, itâ€™s too slow (O(nÂ²)).
