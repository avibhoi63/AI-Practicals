Aim:
Download the iris flower dataset or any other dataset intoa dataframe. Scan the
dataset and given the interference as
1) List down the feature and types
2) Create histogram for each feature in the dataset
3) Create a boxplot for each seature in the dataset
4) Compare distributions and identify outliers.

Code:

import seaborn as sns

df =sns.load_dataset('iris')

df

#list down there features and tere types available in dataset
df.columns

df.info()

df.dtypes

sns.pairplot(df,hue='species')

sns.pairplot(df)

sns.pairplot(df,hue='species',diag_kind='hist')

sns.histplot(df['sepal_length'],kde=True)

sns.histplot(df['sepal_width'],kde=True)

sns.kdeplot(df['sepal_width'])

sns.histplot(df['petal_length'],kde=True)

sns.histplot(df['petal_width'],kde=True)

sns.kdeplot(df['petal_width'])

sns.boxplot(x=df['sepal_length']);

sns.boxplot(x=df['sepal_width']);

sns.boxplot(x=df['petal_length']);

sns.boxplot(x=df['petal_width']);



Description:

Objective:
To explore the Iris flower dataset (or any similar dataset) by performing basic data analysis, including:
Listing all the features and their types.
Creating histograms for each feature to understand their distributions.
Creating boxplots to visualize the spread and identify potential outliers.
Comparing feature distributions to detect data patterns and anomalies.

Theory:
The Iris flower dataset is a classic, widely used dataset in machine learning and data science. It contains 150 samples from each of three species of Iris flowers (Iris setosa, Iris versicolor, and Iris virginica), with 50 samples per species. Each sample is described by four features:
Sepal Length (cm)
Sepal Width (cm)
Petal Length (cm)
Petal Width (cm)

The fifth column in the dataset represents the species or class of the flower. This dataset is well-suited for classification tasks due to its clearly defined, linearly separable classes.
Key Analysis Steps:
Listing Features and Types:
Identifying the column names, data types, and basic statistics for each feature.
Checking for null values and data integrity.
Histogram Creation:
Plotting histograms to visualize the distribution of each feature, providing insights into their range, central tendency, and spread.
Boxplot Creation:
Using boxplots to identify the median, interquartile range (IQR), and potential outliers in each feature.
Outliers are data points that lie significantly outside the typical data range, potentially indicating measurement errors or rare occurrences.
Distribution Comparison:
Comparing the histograms and boxplots to identify overlapping ranges, class separability, and correlations among features.

Conclusion:
This practical demonstrated the importance of exploratory data analysis (EDA) in understanding the structure and distribution of a dataset. By listing feature types, plotting histograms, and using boxplots, we gained valuable insights into the data, including the presence of outliers, feature distributions, and potential classification challenges. These insights are critical for selecting appropriate algorithms and improving the accuracy of machine learning models.


Explainantion:

import seaborn as sns
---Imports the Seaborn library, which is built on Matplotlib and provides a high-level interface for attractive statistical graphics.

df = sns.load_dataset('iris')
df
---Loads the built-in Iris dataset from Seaborn, which contains 150 samples from three species (setosa, versicolor, virginica), each with four feature measurements (sepal length, sepal width, petal length, petal width).
   Displays the full DataFrame to inspect the data.

df.columns
---Returns a list of all the column names (features) in the dataset.

df.info()
---Provides a concise summary of the DataFrame, including:
Column names
Non-null count
Data types
Useful for checking for missing values and data types.

df.dtypes
---Returns the data types of each column, confirming if they are numeric or categorical.

sns.pairplot(df, hue='species')
---Creates a grid of scatter plots for each possible pair of numerical features, with different colors for each species.
   The 'hue' parameter differentiates the data points by species, making class separability clear.

sns.pairplot(df)
----Similar to the previous plot but without color grouping, showing raw pairwise relationships.

sns.pairplot(df, hue='species', diag_kind='hist')
----Adds histograms along the diagonal to visualize the distribution of each feature separately, while retaining species color coding.

sns.histplot(df['sepal_length'], kde=True)
---Plots a histogram for sepal length with an overlaid Kernel Density Estimate (KDE) curve.
   KDE provides a smoothed approximation of the data distribution

sns.histplot(df['sepal_width'], kde=True)
sns.kdeplot(df['sepal_width'])
----Creates both a histogram and a separate KDE plot for sepal width, offering two perspectives on its distribution.

sns.histplot(df['petal_length'], kde=True)
sns.histplot(df['petal_width'], kde=True)
sns.kdeplot(df['petal_width'])
---Repeats the same for petal length and petal width, revealing different distribution shapes and potential class separability.

sns.boxplot(x=df['sepal_length']);
---Creates a boxplot for sepal length, showing the median, interquartile range (IQR), and potential outliers

sns.boxplot(x=df['sepal_width']);
sns.boxplot(x=df['petal_length']);
sns.boxplot(x=df['petal_width']);
---Repeats the same for the remaining three features, making it easy to spot unusually large or small values (outliers).
   Boxplots are excellent for detecting skewness and comparing distributions.


Questions:

What is the Iris dataset?
A classic dataset containing 150 samples of Iris flowers from three species: setosa, versicolor, and virginica.

How many features are in the Iris dataset?
Four: sepal length, sepal width, petal length, petal width.

What is the target variable in this dataset?
Species.

Why use Seaborn for visualization?
It provides high-level, attractive statistical plots with simple syntax.

What does df.info() show?
Basic DataFrame information: column names, non-null counts, and data types.

What is the purpose of a pairplot?
To visualize pairwise relationships between features.

Why use the hue parameter in pairplots?
To differentiate data points by species for better class separability.

What is a histogram used for?
To visualize the distribution of a single numerical feature.

Why add a KDE curve to a histogram?
For a smoothed estimate of the data distribution.

What does a boxplot show?
The median, interquartile range (IQR), and potential outliers.

Why are outliers important?
They can skew results and affect model performance.

What is the IQR in a boxplot?
The range between the 25th and 75th percentile.

How would you handle outliers before training a model?
Remove, cap, or transform them depending on the analysis.

What comes after EDA in a machine learning project?
Data cleaning, feature selection, model training, and evaluation.

Why is feature selection important?
To reduce overfitting, improve accuracy, and speed up training.
