Implement A star (A*) Algorithm for any game search problem


Code:
import heapq
class AStar:
    def __init__(self, grid, start, goal):
        self.grid = grid  # 2D grid where 0 = walkable, 1 = blocked
        self.start = start  # Start position (x, y)
        self.goal = goal  # Goal position (x, y)
        self.rows = len(grid)
        self.cols = len(grid[0])

    def heuristic(self, node):
        # Manhattan distance heuristic
        return abs(node[0] - self.goal[0]) + abs(node[1] - self.goal[1])

    def neighbors(self, node):
        # Return valid neighbors (up, down, left, right)
        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Directions: right, down, left, up
        result = []
        for d in dirs:
            neighbor = (node[0] + d[0], node[1] + d[1])
            if 0 <= neighbor[0] < self.rows and 0 <= neighbor[1] < self.cols and self.grid[neighbor[0]][neighbor[1]] == 0:
                result.append(neighbor)
        return result

    def a_star_search(self):
        # Priority queue to store (f_score, node)
        open_list = []
        heapq.heappush(open_list, (0, self.start))

        came_from = {}  # For reconstructing path
        g_score = {self.start: 0}  # Cost from start to each node
        f_score = {self.start: self.heuristic(self.start)}  # Estimated cost from start to goal

        while open_list:
            current = heapq.heappop(open_list)[1]

            # If we reached the goal, reconstruct the path
            if current == self.goal:
                return self.reconstruct_path(came_from, current)

            for neighbor in self.neighbors(current):
                tentative_g_score = g_score[current] + 1  # Distance from current to neighbor is 1

                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    # Update the best path to the neighbor
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + self.heuristic(neighbor)
                    heapq.heappush(open_list, (f_score[neighbor], neighbor))

        return []  # Return empty path if no solution

    def reconstruct_path(self, came_from, current):
        # Reconstruct path from came_from dictionary
        total_path = [current]
        while current in came_from:
            current = came_from[current]
            total_path.append(current)
        return total_path[::-1]  # Reverse path to start from the beginning

# 0 = walkable, 1 = blocked
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0]
]

start = (0, 0)  # Starting position
goal = (4, 4)   # Goal position

a_star = AStar(grid, start, goal)
path = a_star.a_star_search()

print("Path from start to goal:", path)


Title:
Objective:
To implement the A* (A-Star) algorithm to find the shortest path from a starting point to a goal point in a grid-based game environment.
Theory:

A Algorithm* is a popular and powerful pathfinding and graph traversal algorithm used in many AI applications such as games and navigation systems.
	•	It combines features of Dijkstra’s Algorithm and Greedy Best-First Search.
	•	It uses the following function to determine the priority of each node:
f(n) = g(n) + h(n)
where:
	•	g(n) = actual cost from the start node to current node n
	•	h(n) = heuristic estimated cost from n to the goal (Manhattan Distance in this case)
Algorithm Steps:
	1.	Initialize an open list as a priority queue and insert the start node.
	2.	Maintain g_score (cost from start) and f_score (estimated total cost).
	3.	While the open list is not empty:
	•	Pick the node with the lowest f_score.
	•	If it’s the goal, reconstruct and return the path.
	•	For each valid neighbor:
	•	Calculate tentative g_score.
	•	If this path is better, update scores and record the path.
	4.	If goal is not reached and the open list is empty, return an empty path.
Conclusion:The A* algorithm efficiently finds the shortest path using both actual distance and heuristic estimation. It is widely used in game AI and robotics for smart pathfinding in dynamic environments.


Explaination: 
class AStar:
    def __init__(self, grid, start, goal):   ---	•	Defines the AStar class and its constructor method.
	•	Takes a grid, start, and goal as inputs.

        self.grid = grid  # 2D grid where 0 = walkable, 1 = blocked
        self.start = start  # Start position (x, y)
        self.goal = goal  # Goal position (x, y)
        self.rows = len(grid)
        self.cols = len(grid[0])     ----	•	Stores the grid and start/goal coordinates.
	•	Also stores the number of rows and columns in the grid for boundary checks.

        def heuristic(self, node):
        return abs(node[0] - self.goal[0]) + abs(node[1] - self.goal[1])    -----	This is the Manhattan distance heuristic.
	•	It estimates the cost from a node to the goal by summing the horizontal and vertical distances.

    def neighbors(self, node):
        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Directions: right, down, left, up
        result = []   ----	•	Defines movement directions in a 2D grid (right, down, left, up).

        for d in dirs:
            neighbor = (node[0] + d[0], node[1] + d[1])
            if 0 <= neighbor[0] < self.rows and 0 <= neighbor[1] < self.cols and self.grid[neighbor[0]][neighbor[1]] == 0:
                result.append(neighbor)
        return result    ----	•	For each direction, calculates the neighbor and checks:
	•	It is within grid bounds.
	•	It is walkable (0, not blocked).
	•	Adds valid neighbors to the result list.

    def a_star_search(self):
        open_list = []
        heapq.heappush(open_list, (0, self.start))   ----	•	Initializes the open list (priority queue).
	•	Inserts the start node with a priority of 0.


    def reconstruct_path(self, came_from, current):
        total_path = [current]
        while current in came_from:
            current = came_from[current]
            total_path.append(current)
        return total_path[::-1]    ----	•	Builds the path from goal to start using came_from.
	•	Reverses it to return from start to goal.

grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0]
]   ----	•	Defines a 5x5 grid where 0 = walkable and 1 = blocked.

print("Path from start to goal:", path)   ----Prints the shortest path 



Question:

⸻

Q1: What is the A algorithm?*
A* finds the shortest path using both actual cost (g) and estimated cost (h): f(n) = g(n) + h(n).

Q2: What heuristic is used?
Manhattan distance — suitable for 4-direction grid movement.

Q3: What data structures are used?
	•	heapq (priority queue)
	•	Dictionaries (g_score, f_score, came_from)
	•	2D grid list

Q4: What if no path is found?
Returns an empty list [].

Q5: Time and space complexity?
	•	Time: O(E)
	•	Space: O(V)

Q6: Is A used in games?*
Yes, it’s commonly used in games and robotics.

Q7: Difference between A and Dijkstra?*
Dijkstra: Only g(n).
A*: Uses g(n) + h(n) — faster with a good heuristic.

Q8: Why use a priority queue?
To pick the node with the lowest f-score efficiently.

Q9: How is the path reconstructed?
Trace from goal to start using came_from and reverse it.

Q10: Can it handle diagonal movement?
Not currently. Needs extra directions in neighbors().

